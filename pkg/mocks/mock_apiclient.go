// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/itacservices/common/httpclient.go

// Package mocks is a generated GoMock package.
package mocks

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAPIClient is a mock of APIClient interface.
type MockAPIClient struct {
	ctrl     *gomock.Controller
	recorder *MockAPIClientMockRecorder
}

// MockAPIClientMockRecorder is the mock recorder for MockAPIClient.
type MockAPIClientMockRecorder struct {
	mock *MockAPIClient
}

// NewMockAPIClient creates a new mock instance.
func NewMockAPIClient(ctrl *gomock.Controller) *MockAPIClient {
	mock := &MockAPIClient{ctrl: ctrl}
	mock.recorder = &MockAPIClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAPIClient) EXPECT() *MockAPIClientMockRecorder {
	return m.recorder
}

// GenerateFilesystemLoginCredentials mocks base method.
func (m *MockAPIClient) GenerateFilesystemLoginCredentials(ctx context.Context, resourceId string) (*string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GenerateFilesystemLoginCredentials", ctx, resourceId)
	ret0, _ := ret[0].(*string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GenerateFilesystemLoginCredentials indicates an expected call of GenerateFilesystemLoginCredentials.
func (mr *MockAPIClientMockRecorder) GenerateFilesystemLoginCredentials(ctx, resourceId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GenerateFilesystemLoginCredentials", reflect.TypeOf((*MockAPIClient)(nil).GenerateFilesystemLoginCredentials), ctx, resourceId)
}

// MakeDeleteAPICall mocks base method.
func (m *MockAPIClient) MakeDeleteAPICall(ctx context.Context, url, token string, headers map[string]string) (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeDeleteAPICall", ctx, url, token, headers)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeDeleteAPICall indicates an expected call of MakeDeleteAPICall.
func (mr *MockAPIClientMockRecorder) MakeDeleteAPICall(ctx, url, token, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeDeleteAPICall", reflect.TypeOf((*MockAPIClient)(nil).MakeDeleteAPICall), ctx, url, token, headers)
}

// MakeGetAPICall mocks base method.
func (m *MockAPIClient) MakeGetAPICall(ctx context.Context, url, token string, headers map[string]string) (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakeGetAPICall", ctx, url, token, headers)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakeGetAPICall indicates an expected call of MakeGetAPICall.
func (mr *MockAPIClientMockRecorder) MakeGetAPICall(ctx, url, token, headers interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakeGetAPICall", reflect.TypeOf((*MockAPIClient)(nil).MakeGetAPICall), ctx, url, token, headers)
}

// MakePOSTAPICall mocks base method.
func (m *MockAPIClient) MakePOSTAPICall(ctx context.Context, url, token string, payload []byte) (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePOSTAPICall", ctx, url, token, payload)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakePOSTAPICall indicates an expected call of MakePOSTAPICall.
func (mr *MockAPIClientMockRecorder) MakePOSTAPICall(ctx, url, token, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePOSTAPICall", reflect.TypeOf((*MockAPIClient)(nil).MakePOSTAPICall), ctx, url, token, payload)
}

// MakePutAPICall mocks base method.
func (m *MockAPIClient) MakePutAPICall(ctx context.Context, url, token string, payload []byte) (int, []byte, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "MakePutAPICall", ctx, url, token, payload)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].([]byte)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// MakePutAPICall indicates an expected call of MakePutAPICall.
func (mr *MockAPIClientMockRecorder) MakePutAPICall(ctx, url, token, payload interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "MakePutAPICall", reflect.TypeOf((*MockAPIClient)(nil).MakePutAPICall), ctx, url, token, payload)
}

// ParseString mocks base method.
func (m *MockAPIClient) ParseString(tmpl string, data any) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseString", tmpl, data)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ParseString indicates an expected call of ParseString.
func (mr *MockAPIClientMockRecorder) ParseString(tmpl, data interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseString", reflect.TypeOf((*MockAPIClient)(nil).ParseString), tmpl, data)
}
